////////////////////////////////////////////////////////////////////////////////////

// 01 - Getting Started (5m)

Q:	What are design patterns ?
A:	Design Patterns are elegant solutions to repeating problems in software design. It shows you how you should 
structure classes and how these classes should talk to each other.

In this, series we will explore 23 design patterns.
Book:
	Design Patterns
	Element of Reusable Object-Oriented Software
	By GoF

In this book, these 23 patterns are divided into 3 categories.
	1. Creational
		It's all about different ways to create objects
	2. Structural
		It's about relationship in these objects
	3. Behavioural
		interaction & communication between these objects

By the way, these design patterns don't represent all the patterns in the world.
There are many unofficial and undocumented patterns out there that you might find usefull in certain situations.
But these 23 design patterns are the classic ones that ever software engineer must understand.

////////////////////////////////////////////////////////////////////////////////////

// 02 - The Essentials (33m)

========
Coupling
========
One of the main concept in Object Oriented Systems is coupling which determins how much a class is couppled or dependent on another class.

To decrease dependency and create loosely couppled application, we can use interfaces.

==========
Interfaces
==========
An interface is a contract that specifies the capabilites that a class should provide.

=============
Encapsulation
=============
Encapsulation is more like bundling the data and methods within one uint/class and hiding the values or state of object inside the class.

===========
Abstraction
===========
Abstruction means we should reduce complexity by hiding unnecessary details from our classes.
Following absctrction principle, we will 'private' all irrelevant properties and method for users.

===========
Inheritance
===========

============
Polymorphism
============
It means many forms. It's basically the ability of an object to take on many forms.

===
UML
===
UML shorts/stands for "Unified Modeling Language".

We will discuss 3 types of relationship in this course.
1. Inheritance
2. Composition
3. Dependency

////////////////////////////////////////////////////////////////////////////////////

// 03 - Momento Pattern (13m)

We use this pattern for implementing undo mechanisms.

Single Responsibility Principle (Every class should have single responsibility.)

To build maintainable software, we should design our classes in such a way that thay have single responsibility.

////////////////////////////////////////////////////////////////////////////////////

// 04 - State Pattern (25m)

State Pattern allows an object to behavive differently when its state changes.

Open Close Principle
That basically means, our classes should be open for extension but closed for modification.

Don't abuse design pattern

////////////////////////////////////////////////////////////////////////////////////

// 05 - Iterator Pattern (21m)

Changing the internal of an object should not affect it's consumers.

Need to review this again.
PHP does not support inner classes.

////////////////////////////////////////////////////////////////////////////////////

// 06 - Strategy Pattern (13m)

This pattern looks like state pattern.
The structure of state pattern looks very similar to the structure of the strategy pattern.

What is the difference?

We use both these pattern to change the behaviour of an object. For example, 

The difference between the state & strategy pattern is that in the state pattern, object can have single state (i.e: current tool) and all the behaviours are represented by subclass of tool interface.
In contrast, in the strategy pattern, we don't have a single state. Different behaviours are represented using different strategy objects.

////////////////////////////////////////////////////////////////////////////////////

// 07 - Template Method Pattern (13m)

Problems with sample code (containing folder name is 'problem').
----------------------------------------------------------------
- Code duplication (private field & constructor in both classes)
- Nobody is forcing to follow the structure (private field, constructor method & "auditTrail.record();" inside "execute()" method).

////////////////////////////////////////////////////////////////////////////////////

// 08 - Command Pattern (28m)

What the command pattern is all about?
Let's say we want to design a graphical userinterface framework. So other developers get user framework to build applications with the graphical user interface.

The code that should be executed here (inside click method of Button class) would be dependent on where we use this button.
For example:
on one dialog box, save something in database
on another button, delete record from database

So at the time of designing this framework at the time of implementing the button class we don't know
what code should be executed when we click a button.

The command pattern aims to solve this problem.

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////