////////////////////////////////////////////////////////////////////////////////////

// Node Architecture (lesson 1.3)

JavaScript Engines
  Edge    => Chakra
  Firefox => SpiderMonkey
  Chrome  => V8

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
2 - Node Module System

// Global Object (lesson 2.2)

Inside node, "global" is equalent to "window" inside browser.
Here is another difference between "global" and "window". User defined variables are not added in "global" as its property.
  Example: 
    var message = "good to see you";
    console.log(global.message);

////////////////////////////////////////////////////////////////////////////////////

// Modules (lesson 2.3)

Every node file is considered as a module. Variable & functions defined inside module are private to that module and not visible outside.
If we need variable or function outside, we need to explicitly  export it and make it public.

////////////////////////////////////////////////////////////////////////////////////

// Module WWrapper Function (lesson 2.6)

(function (exports, require, module, __filename, __dirname) {

})

Node automatically put our each module inside wrapper function.

////////////////////////////////////////////////////////////////////////////////////

// Events Module (lesson 2.10)

////////////////////////////////////////////////////////////////////////////////////

// Event Arguments (lesson 2.11)

////////////////////////////////////////////////////////////////////////////////////

// Extending EventEmitter (lesson 2.12)

////////////////////////////////////////////////////////////////////////////////////

// HTTP Module (lesson 2.13)

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
4 - Building RESTful API's Using Express

// Building Your First Web Server (lesson 4.4)

////////////////////////////////////////////////////////////////////////////////////

// Nodemon (lesson 4.5)

For continuous watching changes in file & restarting server if any change found.

////////////////////////////////////////////////////////////////////////////////////

// Environment Variables (lesson 4.6)

To set environment
  For Mac
  $ export PORT=5000
  For windows
  $ set PORT=5000

////////////////////////////////////////////////////////////////////////////////////

// Route Parameters (lesson 4.7)

app.get("/api/posts/:year/:month", (req, res) => {
  // http://localhost:3000/api/posts/2018/3
  res.send(req.params);

  // http://localhost:3000/api/posts/2018/3?sortBy=name
  res.send(req.query);
});

////////////////////////////////////////////////////////////////////////////////////

// Handling HTTP GET Requests (lesson 4.8)

////////////////////////////////////////////////////////////////////////////////////

// Handling HTTP GET Requests (lesson 4.8)

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
5 - Express- Advanced Topics

// Middleware (lesson 5.2)

A middleware function is basically a function that takes a request object and  either return a response to the client or passes control to another middleware function.
In Express, every route handler function is, technically, a middleware function.
Another example of middleware function is 
  app.use(express.json());
  This method return a middleware function. The job of this middleware function is to read the request and 
  if there is json object in the body of the request it will parse the body of the request into json object.

Request Processing Pipeline:
 Every request pass through this pipeline. The pipeline consists of one or more middleware functions. 
 Each middleware function either terminate the request response cycle, by returning response object, or it will pass control to another middleware function.

////////////////////////////////////////////////////////////////////////////////////

// Creating Custom Middleware (lesson 5.3)

app.use(function(req, res, next) {
  console.log('Logging...');
  next();
});

////////////////////////////////////////////////////////////////////////////////////

// Built-in Middleware (lesson 5.4)

// This middleware function parses incoming requrest with urlencoded payload.
app.use(express.urlencoded({ extended: true }));

/**
 * With this middleware, we can server static content.
 * http://localhost:3000/readme.txt
 */
app.use(express.static("public"));

////////////////////////////////////////////////////////////////////////////////////

// Third-party Middleware (lesson 5.5)

Some useful third party middlewares
helmet: to secure application by setting various http headers
morgan: to log http requests in console or file

////////////////////////////////////////////////////////////////////////////////////

// Environments (lesson 5.6)

We can check current environment by using environment variable of 
  process.env.NODE_ENV
  It returns "undefined", if environment variable has not been set

Or we can use
  app.get("env")
  It returns "development", if environment variable has not been set.

////////////////////////////////////////////////////////////////////////////////////

// Configuration (lesson 5.7)

We can get environment variables inside "custom-environment-variables.json" file.

config.get('mail.password');
"config" object looks various sources to find value of passed argument.
The source can be configuration file (.json file), it can be an environment variable, it can also be a command line argument.

////////////////////////////////////////////////////////////////////////////////////

// Debugging (lesson 5.8)

$ npm i debug

To enable debugging we need to set environment variable (DEBUG) with the value of namespace.
For setting environment variable, run following command in terminal
  $ export DEBUG=app:startup
Or we can enable multiple namespaces as
  $ export DEBUG=app:startup,app:db
  OR we can use wildcard. For all "app" namespace
  $ export DEBUG=app:*

There is a shorter way to set environment variable. We can set at the time of starting app.
  $ DEBUG=app:db nodemon index.js

////////////////////////////////////////////////////////////////////////////////////

// Templating Engines (lesson 5.9)

Packages:
  Pug, Mustache, EJS

Run $ npm i pug

////////////////////////////////////////////////////////////////////////////////////

// Database Integration (lesson 5.10)

////////////////////////////////////////////////////////////////////////////////////

// Authentication (lesson 5.11)

////////////////////////////////////////////////////////////////////////////////////

// Building Maintainable Routes (lesson 5.12)

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
6- Asynchronous JavaScript

// Synchronous vs Asynchronous Code (lesson 6.1)

Asynchronous doesn't mean concurrent or multi threaded.

////////////////////////////////////////////////////////////////////////////////////

// Patterns for Dealing with Asynchronous Code (lesson 6.2)

// Callbacks
// Promises
// Async/await

////////////////////////////////////////////////////////////////////////////////////

// Callbacks (lesson 6.3)

////////////////////////////////////////////////////////////////////////////////////

// Callback Hell (lesson 6.4)

// Asynchronous
console.log("Before");
getUser(1, user => {
  getRepositories(user.gitHubUsername, repos => {
    getCommits(repo, commits => {
      // CALLBACK HELL
      
    });
  });
});
console.log("After");

// Synchronous
console.log("Before");
const user = getUser(1);
const repos = getRepositories(user.gitHubUsername);
const commits = getCommits(repos[0]);
console.log("After");

////////////////////////////////////////////////////////////////////////////////////

// Named Function (lesson 6.5)

Example is not clear

////////////////////////////////////////////////////////////////////////////////////

// Promise (lesson 6.6)

A promise is an object that holds the eventual result of an asynchronous operation.
Initially, it's in the pending state when we create this promise. Operation can be completed successfully or failed.
If it completes successfully, we say the promise is resolved or fulfilled. And the state of this promise changes from pending to resolved (also called fulfilled).
If asynchronous operation fails, the state of promise go from pending to rejected.
We use "reject" functoin to retun an error to the consumer of this promise.

////////////////////////////////////////////////////////////////////////////////////

// Replacing Calbacks with Promises (lesson 6.7)

////////////////////////////////////////////////////////////////////////////////////

// Consuming Promises (lesson 6.8)

////////////////////////////////////////////////////////////////////////////////////

// Creating Settled Promises (lesson 6.9)

When rejecting promise, always use "Error()" object. Because, it displays call stack as well.

////////////////////////////////////////////////////////////////////////////////////

// Parallel Promises (lesson 6.10)

Promise.all();
This method returns a new promise that will be resolved when all the promises of given array(as a param) will be resolved.

Explaination:
1) We don't have real concurrency or multi threading. 
    We still have single thread whick is kicking off multiple asynchronous operations almost at the same time (not exactly at the same time).
2) When we get the result, the result will be available as an array.
3) If any of our promise is rejected then final promise is considered as rejected.

Sometimes we want to kick off multiple asynchronous operation at the same time but we want to do something as soon as one of asynchronous operatoin is completes.
For that we have another method available inside Promise class.
"Promise.race()" instead of "Promise.all()"
In this case, result is not an array of all promises, rather it's the value of first fulfilled promise.

////////////////////////////////////////////////////////////////////////////////////

// Async and Await (lesson 6.11)

Whenever you use the "await" operator in a function you need to decorate that function with "async" modifier.
In this particular example, we have written "await" statements inside index.js outside of a function. 
It is a requirement of JavaScript engine that whenever you use "await", you should have a function that is decorated with "async".
Basically, async & await are build on top of promises. They are syntatical sugar in the language that allow us to write asynchronous code that looks synchronous.
Internally, when JavaScript engine execute this(async/await) code it going to convert this code into promise-based code.

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
7- CRUD Operations Using Mongoose

// Introducing MongoDB (lesson7.1)

////////////////////////////////////////////////////////////////////////////////////

// Installing MongoDB on Mac (lesson7.2)

Create folder for mongodb to store data
  $ sudo mkdir -p /data/db

Give proper permissions to the directory
  $ sudo chown -R `id -un` /data/db

Now run, MongoDemon. It's a service runs in background and listens for connections on given port.
  $ mongod

////////////////////////////////////////////////////////////////////////////////////

// Installing MongoDB on Windows (lesson7.3)

Create folder for mongodb to store data
  $ md c:\data\db

////////////////////////////////////////////////////////////////////////////////////

// Connecting to MongoDB (lesson7.4)

$ npm i mongoose

////////////////////////////////////////////////////////////////////////////////////

// Schemas (lesson7.5)

In mongoose, we have this concept called schema. This is just specific to mongoose, it's not part of mongodb.
We use schema in mongoose to define the shape of documents in a mongodb collection.

Schema Types:
  String, Number, Date, Buffer, Boolean, ObjectID, Array

////////////////////////////////////////////////////////////////////////////////////

// Models (lesson7.6)

Now we need to compile schema into a model.

////////////////////////////////////////////////////////////////////////////////////

// Saving a Document (lesson7.7)

It's asynchronous operation.

////////////////////////////////////////////////////////////////////////////////////

// Querying Documents (lesson7.8)

The "Course" class that we have defined have a bunch of methods for querying documents.
  .find() // To get the list of documents
  .findById() // 
  .findOne() // to fetch single document

Sorting query documents.
  For ascending order, use 1
  For descending order, use -1

////////////////////////////////////////////////////////////////////////////////////

// Comparison Query Operators (lesson7.9)

Here are the comparison operators that we have in mongodb.
  eq  => equal
  ne  => not equal
  gt  => greater than
  gte => greater than or equla to
  lt  => less than
  lte => less than or equal to
  in
  nin => not in

Examples:
  Find where price is 10
    .find({ price: 10 })
  
  Find where price is greater than 10
    .find({ price: { $gt: 10 } })
  
  Find where price between 10 & 20
    .find({ price: { $gte: 10, $lte: 20 } })
  
  Find where price equal to 10 or 15 or 20
    .find({ price: { $in: [10, 15, 20] } })

////////////////////////////////////////////////////////////////////////////////////

// Logical Query Operators (lesson7.10)

Here are the logical operators that we have in mongodb.
  or
  and

Examples:
  Find where "author" is "Usman" or "isPublished" is "true"
    .find()
    .or([ { author: 'Usman' }, { isPublished: true } ])
  
  Find where "author" is "Usman" and "isPublished" is "true"
    .find()
    .and([ { author: 'Usman' }, { isPublished: true } ])

////////////////////////////////////////////////////////////////////////////////////

// Regular Expressions (lesson7.11)

In Patterns
  ^   => string which start with something
  $   => end of a string
  i   => case insensitive
  .*  => 0 or more characters (doesn't care which characters are there)

Example:
  Find where "author" starts with "Usman"
    .find({ author: /pattern/ })
    .find({ author: /^Usman/ })
  
  Find where "author" ends with "man"
    .find({ author: /man$/ })
  
  Above examples are case-sensitive. For case-insensitive, add "i" after pattern
    .find({ author: /man$/i })
  
  Find where "author" contains "Usman"
    .find({ author: /.*Usman.*/ })

////////////////////////////////////////////////////////////////////////////////////

// Counting (lesson7.12)

To get count of fetched documents/records.
  .find({ author: "Usman", isPublished: true })
    .count();

////////////////////////////////////////////////////////////////////////////////////

// Pagination (lesson7.13)

async function getCourses() {
  const pageNumber = 2;
  const pageSize = 10;

  const courses = await Course.find({ author: "Usman", isPublished: true })
    .skip((pageNumber -1) * pageSize)
    .limit(pageSize)
    .sort({ name: 1 })
    .select({ name: 1, tags: 1 });
  console.log(courses);
}

Run docker container of mongo image:
  $ docker run --name mongo-demo -p 27017:27017 -v <local storage>:/data/db -d mongo
  Example:
  $ docker run --name mongo-demo -p 27017:27017 -v /Volumes/Data/work/projects/git/usmanakram/Practice/JS/codewithmosh.com/TheCompleteNode.jsCourse/mongodb-files:/data/db -d mongo

////////////////////////////////////////////////////////////////////////////////////

// Exercise (lesson7.14)

mongoimport --db mongo-exercises --collection courses --drop --file exercise-data.json --jsonArray

Task:
  Get all courses
    published,
    having tag "backend", 
    sort by name,
    pick only name

We have another syntax to sort result.
Example:
  Sort by name, ascending
    .sort('name')
  Sort by name, descending
    .sort('-name')

We have another syntax to pick specific column(s).
  .select({ name: 1, author: 1 })
  OR
  .select("name author");

Solution:
const courses = await Course.find({ isPublished: true, tags: "backend" })
  // .sort({ name: 1 })
  .sort("name")
  // .select({ name: 1, author: 1 })
  .select("name author");

////////////////////////////////////////////////////////////////////////////////////

// Exercise (lesson7.15)

Task:
  Get all courses
    published,
    having tag "backend" Or "backend", 
    sort by price descending,
    pick only name, author and price

Solution # 1:
const courses = await Course
  .find({ isPublished: true, tags: { $in: ['frontend', 'backend'] } })
  .sort('-price')
  .select('name author price');

Solution # 2:
const courses = await Course
  .find({ isPublished: true })
  .or([ { tags: 'frontend' }, { tags: 'backend' } ])
  .sort('-price')
  .select('name author price');

////////////////////////////////////////////////////////////////////////////////////

// Exercise (lesson7.16)

Task:
  Get all courses
    published,
    price $15 or greater,
    or having work "by" in name

Solution:
const courses = await Course
  .find({ isPublished: true })
  .or([
    { price: { $gte: 15 } }, 
    { name: /.*by.*/i }
    ])
  .sort('-price')
  .select('name author price');

////////////////////////////////////////////////////////////////////////////////////

// Updating a Document (lesson7.17)

async function updateCourse(id) {
  const course = await Course.findById(id);
  if (!course) return;

  course.isPublished = true;
  course.author = 'Another Author';
  
  // OR
  /*
  course.set({
    isPublished: true,
    author: 'Another Author'
  });
  */

  const result = await course.save();
  console.log(result);
}

updateCourse('sfasdfads');

////////////////////////////////////////////////////////////////////////////////////

// Updating a Document - Update First (lesson7.18)

async function updateCourse(id) {
  const result = await Course.update({ _id: id }, {
    $set: {
      author: 'Usman',
      isPublished: false
    }
  });
  console.log(result);
  
  // OR
  const course = await Course.findByIdAndUpdate(id, {
    $set: {
      author: 'Usman',
      isPublished: false
    }
  },
  { new: true } // For updated record
  );

  // returns original document/record
  console.log(course);
}

updateCourse('sfasdfads');

For getting updated record, pass third argument to findByIdAndUpdate() as { new: true }

////////////////////////////////////////////////////////////////////////////////////

// Removing Documents (lesson7.19)

async function removeCourse(id) {
  // To delete first record and return Promise then an object containing count of deleted records
  const result =  await Course.deleteOne({ _id: id });

  // To delete multiple records and return Promise then an object containing count of deleted records
  const result =  await Course.deleteMany({ _id: id });

  console.log(result);

  // If we need to fetch deleted document
  // if record does not exist, it returns null
  const course = await Course.findByIdAndRemove(id);
  console.log(course);
}
removeCourse('sfasdfads');

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
8- Mongo - Data Validation

// Validation (lesson8.1)

////////////////////////////////////////////////////////////////////////////////////

// Built-in Validators (lesson8.2)

Making conditionally property required.
For that, we can use function but cannot use arrow function.

name: {
  type: String,
  required: true,
  minlength: 5,
  maxlength: 255
  // match: /pattern/
},
category: {
  type: String,
  require: true,
  enum: ["web", "mobile", "network"]
},
author: String,
price: {
  type: Number,
  required: function() {
    return this.isPublished;
  },
  min: 10,
  max: 200
}

Validator specific to String:
  minlength, maxlength, match (for regular expression), enum

For Number:
  min, max

For Date:
  min, max

////////////////////////////////////////////////////////////////////////////////////

// Custom Validators (lesson8.3)

tags: [ String ]

Example: Apply validation as every course should have atleast one tag.
We cannot use "required" validator here. Because, with "required" we can simply pass an empty array and 
that will be valid for mongoose library.
So, here we need custom validator.

tags: {
  type: Array,
  validate: {
    validator: function(v) {
      return v && v.length > 0;
    },
    message: "A course should have at least one tag."
  }
}

////////////////////////////////////////////////////////////////////////////////////

// Async Validators (lesson8.4)

Sometime validation logic may involve reading something from database or from a remote http service.
In that case, we need async validator.

tags: {
  type: Array,
  validate: {
    isAsync: true,
    validator: function(v, callback) {
      setTimeout(() => {
        /**
          * Do some async work and when the result is ready, call "callback" with the result
          */
        const result = v && v.length > 0;
        callback(result);
      }, 4000);
    },
    message: "A course should have at least one tag."
  }
},

////////////////////////////////////////////////////////////////////////////////////

// Validation Errors (lesson8.5)

try {
  const result = await course.save();
  console.log(result);
} catch (ex) {
  // To log error messages in console
  console.log(ex.message);
  // OR
  for (field in ex.errors) {
    // For complete error object
    console.log(ex.errors[field]);
    // For only error message (property)
    console.log(ex.errors[field].message);
  }
}

////////////////////////////////////////////////////////////////////////////////////

// SchemaType Options (lesson8.6)

With String type, we have some additional validations. Like
lowercase:
  string will be saved as lowercase.
uppercase:
  string will be saved as uppercase.
trim:
  string will be saved as trimmed.

Example:

category: {
  type: String,
  require: true,
  enum: ["web", "mobile", "network"],
  lowercase: true,
  // uppercase: true,
  trim: true
}

We can also define custom getters & setters.

price: {
  type: Number,
  required: function() {
    return this.isPublished;
  },
  min: 10,
  max: 200,
  get: v => Math.round(v),
  set: v => Math.round(v)
}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
9- Mongoose- Modeling Relationships between Connected Data

// Modelling Relationships (lesson9.1)

For relationships, we have two approaches
  1) Using References (also called Normalization)
  2) Using Embedded Documents (also called Denormalization)


Trade off between query performance vs consistency

////////////////////////////////////////////////////////////////////////////////////

// Referencing Documents (lesson9.2)

////////////////////////////////////////////////////////////////////////////////////

// Population (lesson9.3)

const Author = mongoose.model("Author", new mongoose.Schema({
  name: String, 
  bio: String, 
  website: String
}));

const Course = mongoose.model("Course", new mongoose.Schema({
  name: String,
  author: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Author"
  }
}));

async function listCourses() {
  const courses = await Course.find()
    .populate("author", "name -_id") // Joining "author" table and fetching only name & excluding "_id"
    .populate("category", "name")
    .select("name author");
  console.log(courses);
}

////////////////////////////////////////////////////////////////////////////////////

// Embedding Document (lesson9.4)

const authorSchema = new mongoose.Schema({
  name: String,
  bio: String,
  website: String
});

const Author = mongoose.model("Author", authorSchema);

const Course = mongoose.model("Course", new mongoose.Schema({
  name: String,
  author: {
    type: authorSchema,
    required: true
  }
}));

async function updateAuthor(courseId) {
  const course = await Course.findById(courseId);
  course.author.name = "Usman Akram";
  course.save();
  // OR
  const course = await Course.update(
    { _id: courseId },
    {
      $set: {
        "author.name": "Usman Akram"
      }
    }
  );

  // To remove property
  const course = await Course.update(
    { _id: courseId },
    {
      $unset: {
        author: ""
      }
    }
  );
}

////////////////////////////////////////////////////////////////////////////////////

// Using an Array of Sub-documents (lesson9.5)

const authorSchema = new mongoose.Schema({
  name: String,
  bio: String,
  website: String
});

const Author = mongoose.model("Author", authorSchema);

const Course = mongoose.model("Course", new mongoose.Schema({
  name: String,
  authors: [authorSchema]
}));

async function createCourse(name, authors) {
  const course = new Course({ name, authors });

  const result = await course.save();
  console.log(result);
}

async function addAuthor(courseId, author) {
  const course = await Course.findById(courseId);
  course.authors.push(author);
  course.save();
}

async function removeAuthor(courseId, authorId) {
  const course = await Course.findById(courseId);
  const author = course.authors.id(authorId);
  author.remove();
  course.save();
}

createCourse("Node Course", [
  new Author({ name: "Usman" }),
  new Author({ name: "Zeeshan" })
]);

addAuthor("_id", new Author({ name: "John" }));
removeAuthor("_id", "author_id");

////////////////////////////////////////////////////////////////////////////////////

// Project - Build the Movies API (lesson9.6)

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
10- Authentication and Authorization

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
11- Handling and Logging Errors

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
12- Unit Testing

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
13- Integration Testing

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
14- Test-Driven Development

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
15- Deployment

////////////////////////////////////////////////////////////////////////////////////