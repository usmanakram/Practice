////////////////////////////////////////////////////////////////////////////////////

// Node Architecture (lesson 1.3)

JavaScript Engines
  Edge    => Chakra
  Firefox => SpiderMonkey
  Chrome  => V8

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
2 - Node Module System

// Global Object (lesson 2.2)

Inside node, "global" is equalent to "window" inside browser.
Here is another difference between "global" and "window". User defined variables are not added in "global" as its property.
  Example: 
    var message = "good to see you";
    console.log(global.message);

////////////////////////////////////////////////////////////////////////////////////

// Modules (lesson 2.3)

Every node file is considered as a module. Variable & functions defined inside module are private to that module and not visible outside.
If we need variable or function outside, we need to explicitly  export it and make it public.

////////////////////////////////////////////////////////////////////////////////////

// Module WWrapper Function (lesson 2.6)

(function (exports, require, module, __filename, __dirname) {

})

Node automatically put our each module inside wrapper function.

////////////////////////////////////////////////////////////////////////////////////

// Events Module (lesson 2.10)

////////////////////////////////////////////////////////////////////////////////////

// Event Arguments (lesson 2.11)

////////////////////////////////////////////////////////////////////////////////////

// Extending EventEmitter (lesson 2.12)

////////////////////////////////////////////////////////////////////////////////////

// HTTP Module (lesson 2.13)

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
4 - Building RESTful API's Using Express

// Building Your First Web Server (lesson 4.4)

////////////////////////////////////////////////////////////////////////////////////

// Nodemon (lesson 4.5)

For continuous watching changes in file & restarting server if any change found.

////////////////////////////////////////////////////////////////////////////////////

// Environment Variables (lesson 4.6)

To set environment
  For Mac
  $ export PORT=5000
  For windows
  $ set PORT=5000

////////////////////////////////////////////////////////////////////////////////////

// Route Parameters (lesson 4.7)

app.get("/api/posts/:year/:month", (req, res) => {
  // http://localhost:3000/api/posts/2018/3
  res.send(req.params);

  // http://localhost:3000/api/posts/2018/3?sortBy=name
  res.send(req.query);
});

////////////////////////////////////////////////////////////////////////////////////

// Handling HTTP GET Requests (lesson 4.8)

////////////////////////////////////////////////////////////////////////////////////

// Handling HTTP GET Requests (lesson 4.8)

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
5 - Express- Advanced Topics

// Middleware (lesson 5.2)

A middleware function is basically a function that takes a request object and  either return a response to the client or passes control to another middleware function.
In Express, every route handler function is, technically, a middleware function.
Another example of middleware function is 
  app.use(express.json());
  This method return a middleware functin. The job of this middleware function is to read the request and 
  if there is json object in the body of the request it will parse the body of the request into json object.

Request Processing Pipeline:
 Every request pass through this pipeline. The pipeline consists of one or more middleware functions. 
 Each middleware function either terminate the request response cycle, by returning response object, or it will pass control to another middleware function.

////////////////////////////////////////////////////////////////////////////////////

// Creating Custom Middleware (lesson 5.3)

app.use(function(req, res, next) {
  console.log('Logging...');
  next();
});

////////////////////////////////////////////////////////////////////////////////////

// Built-in Middleware (lesson 5.4)

// This middleware function parses incoming requrest with urlencoded payload.
app.use(express.urlencoded({ extended: true }));

/**
 * With this middleware, we can server static content.
 * http://localhost:3000/readme.txt
 */
app.use(express.static("public"));

////////////////////////////////////////////////////////////////////////////////////

// Third-party Middleware (lesson 5.5)



////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
6- Asynchronous JavaScript

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
7- CRUD Operations Using Mongoose

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
8- Mongo - Data Validation

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
9- Mongoose- Modeling Relationships between Connected Data

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
10- Authentication and Authorization

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
11- Handling and Logging Errors

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
12- Unit Testing

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
13- Integration Testing

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
14- Test-Driven Development

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
15- Deployment

////////////////////////////////////////////////////////////////////////////////////