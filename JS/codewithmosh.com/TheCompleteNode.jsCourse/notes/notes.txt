////////////////////////////////////////////////////////////////////////////////////

// Node Architecture (lesson 1.3)

JavaScript Engines
  Edge    => Chakra
  Firefox => SpiderMonkey
  Chrome  => V8

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
2 - Node Module System

// Global Object (lesson 2.2)

Inside node, "global" is equalent to "window" inside browser.
Here is another difference between "global" and "window". User defined variables are not added in "global" as its property.
  Example: 
    var message = "good to see you";
    console.log(global.message);

////////////////////////////////////////////////////////////////////////////////////

// Modules (lesson 2.3)

Every node file is considered as a module. Variable & functions defined inside module are private to that module and not visible outside.
If we need variable or function outside, we need to explicitly  export it and make it public.

////////////////////////////////////////////////////////////////////////////////////

// Module WWrapper Function (lesson 2.6)

(function (exports, require, module, __filename, __dirname) {

})

Node automatically put our each module inside wrapper function.

////////////////////////////////////////////////////////////////////////////////////

// Events Module (lesson 2.10)

////////////////////////////////////////////////////////////////////////////////////

// Event Arguments (lesson 2.11)

////////////////////////////////////////////////////////////////////////////////////

// Extending EventEmitter (lesson 2.12)

////////////////////////////////////////////////////////////////////////////////////

// HTTP Module (lesson 2.13)

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
4 - Building RESTful API's Using Express

// Building Your First Web Server (lesson 4.4)

////////////////////////////////////////////////////////////////////////////////////

// Nodemon (lesson 4.5)

For continuous watching changes in file & restarting server if any change found.

////////////////////////////////////////////////////////////////////////////////////

// Environment Variables (lesson 4.6)

To set environment
  For Mac
  $ export PORT=5000
  For windows
  $ set PORT=5000

////////////////////////////////////////////////////////////////////////////////////

// Route Parameters (lesson 4.7)

app.get("/api/posts/:year/:month", (req, res) => {
  // http://localhost:3000/api/posts/2018/3
  res.send(req.params);

  // http://localhost:3000/api/posts/2018/3?sortBy=name
  res.send(req.query);
});

////////////////////////////////////////////////////////////////////////////////////

// Handling HTTP GET Requests (lesson 4.8)

////////////////////////////////////////////////////////////////////////////////////

// Handling HTTP GET Requests (lesson 4.8)

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
5 - Express- Advanced Topics

// Middleware (lesson 5.2)

A middleware function is basically a function that takes a request object and  either return a response to the client or passes control to another middleware function.
In Express, every route handler function is, technically, a middleware function.
Another example of middleware function is 
  app.use(express.json());
  This method return a middleware functin. The job of this middleware function is to read the request and 
  if there is json object in the body of the request it will parse the body of the request into json object.

Request Processing Pipeline:
 Every request pass through this pipeline. The pipeline consists of one or more middleware functions. 
 Each middleware function either terminate the request response cycle, by returning response object, or it will pass control to another middleware function.

////////////////////////////////////////////////////////////////////////////////////

// Creating Custom Middleware (lesson 5.3)

app.use(function(req, res, next) {
  console.log('Logging...');
  next();
});

////////////////////////////////////////////////////////////////////////////////////

// Built-in Middleware (lesson 5.4)

// This middleware function parses incoming requrest with urlencoded payload.
app.use(express.urlencoded({ extended: true }));

/**
 * With this middleware, we can server static content.
 * http://localhost:3000/readme.txt
 */
app.use(express.static("public"));

////////////////////////////////////////////////////////////////////////////////////

// Third-party Middleware (lesson 5.5)

Some useful third party middlewares
helmet: to secure application by setting various http headers
morgan: to log http requests in console or file

////////////////////////////////////////////////////////////////////////////////////

// Environments (lesson 5.6)

We can check current environment by using environment variable of 
  process.env.NODE_ENV
  It returns "undefined", if environment variable has not been set

Or we can use
  app.get("env")
  It returns "development", if environment variable has not been set.

////////////////////////////////////////////////////////////////////////////////////

// Configuration (lesson 5.7)

We can get environment variables inside "custom-environment-variables.json" file.

config.get('mail.password');
"config" object looks various sources to find value of passed argument.
The source can be configuration file (.json file), it can be an environment variable, it can also be a command line argument.

////////////////////////////////////////////////////////////////////////////////////

// Debugging (lesson 5.8)

$ npm i debug

To enable debugging we need to set environment variable (DEBUG) with the value of namespace.
For setting environment variable, run following command in terminal
  $ export DEBUG=app:startup
Or we can enable multiple namespaces as
  $ export DEBUG=app:startup,app:db
  OR we can use wildcard. For all "app" namespace
  $ export DEBUG=app:*

There is a shorter way to set environment variable. We can set at the time of starting app.
  $ DEBUG=app:db nodemon index.js

////////////////////////////////////////////////////////////////////////////////////

// Templating Engines (lesson 5.9)

Packages:
  Pug, Mustache, EJS

Run $ npm i pug

////////////////////////////////////////////////////////////////////////////////////

// Database Integration (lesson 5.10)

////////////////////////////////////////////////////////////////////////////////////

// Authentication (lesson 5.11)

////////////////////////////////////////////////////////////////////////////////////

// Building Maintainable Routes (lesson 5.12)

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
6- Asynchronous JavaScript

// Synchronous vs Asynchronous Code (lesson 6.1)

Asynchronous doesn't mean concurrent or multi threaded.

////////////////////////////////////////////////////////////////////////////////////

// Patterns for Dealing with Asynchronous Code (lesson 6.2)

// Callbacks
// Promises
// Async/await

////////////////////////////////////////////////////////////////////////////////////

// Callbacks (lesson 6.3)

////////////////////////////////////////////////////////////////////////////////////

// Callback Hell (lesson 6.4)

// Asynchronous
console.log("Before");
getUser(1, user => {
  getRepositories(user.gitHubUsername, repos => {
    getCommits(repo, commits => {
      // CALLBACK HELL
      
    });
  });
});
console.log("After");

// Synchronous
console.log("Before");
const user = getUser(1);
const repos = getRepositories(user.gitHubUsername);
const commits = getCommits(repos[0]);
console.log("After");

////////////////////////////////////////////////////////////////////////////////////

// Named Function (lesson 6.5)

Example is not clear

////////////////////////////////////////////////////////////////////////////////////

// Promise (lesson 6.6)

A promise is an object that holds the eventual result of an asynchronous operation.
Initially, it's in the pending state when we create this promise. Operation can be completed successfully or failed.
If it completes successfully, we say the promise is resolved or fulfilled. And the state of this promise changes from pending to resolved (also called fulfilled).
If asynchronous operation fails, the state of promise go from pending to rejected.
We use "reject" functoin to retun an error to the consumer of this promise.

////////////////////////////////////////////////////////////////////////////////////

// Replacing Calbacks with Promises (lesson 6.7)

////////////////////////////////////////////////////////////////////////////////////

// Consuming Promises (lesson 6.8)

////////////////////////////////////////////////////////////////////////////////////

// Creating Settled Promises (lesson 6.9)

When rejecting promise, always use "Error()" object. Because, it displays call stack as well.

////////////////////////////////////////////////////////////////////////////////////

// Parallel Promises (lesson 6.10)

Promise.all();
This method returns a new promise that will be resolved when all the promises of given array(as a param) will be resolved.

Explaination:
1) We don't have real concurrency or multi threading. 
    We still have single thread whick is kicking off multiple asynchronous operations almost at the same time (not exactly at the same time).
2) When we get the result, the result will be available as an array.
3) If any of our promise is rejected then final promise is considered as rejected.

Sometimes we want to kick off multiple asynchronous operation at the same time but we want to do something as soon as one of asynchronous operatoin is completes.
For that we have another method available inside Promise class.
"Promise.race()" instead of "Promise.all()"
In this case, result is not an array of all promises, rather it's the value of first fulfilled promise.

////////////////////////////////////////////////////////////////////////////////////

// Async and Await (lesson 6.11)

Watch tutorial again and put some notes here.

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
7- CRUD Operations Using Mongoose

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
8- Mongo - Data Validation

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
9- Mongoose- Modeling Relationships between Connected Data

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
10- Authentication and Authorization

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
11- Handling and Logging Errors

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
12- Unit Testing

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
13- Integration Testing

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
14- Test-Driven Development

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
15- Deployment

////////////////////////////////////////////////////////////////////////////////////